[
  {
    "id": 1,
    "solver": "OSQP",
    "type": "Simple QP",
    "python_code": "import osqp\nimport numpy as np\nfrom scipy import sparse\n\n# Define problem data\nP = sparse.csc_matrix([[4, 1], [1, 2]])\nq = np.array([1, 1])\nA = sparse.csc_matrix([[1, 1], [1, 0], [0, 1]])\nl = np.array([1, 0, 0])\nu = np.array([1, 0.7, 0.7])\n\n# Create an OSQP object\nprob = osqp.OSQP()\n\n# Setup workspace and change alpha parameter\nprob.setup(P, q, A, l, u, alpha=1.0)\n\n# Solve problem\nres = prob.solve()",
    "c_code": "#include <stdio.h>\n#include <stdlib.h>\n#include \"osqp.h\"\n\nint main(int argc, char **argv) {\n    OSQPFloat P_x[3] = {0, 1.0, 2.0};\n    OSQPInt P_nnz = 3;\n    OSQPInt P_i[3] = {0, 1};\n    OSQPInt P_p[3] = {0, 1, 3};\n    OSQPFloat q[2] = {1.0, 1.0};\n    OSQPFloat A_x[4] = {1.0, 1.0, 1.0, 1.0};\n    OSQPInt A_nnz = 4;\n    OSQPInt A_i[4] = {1, 0, 2};\n    OSQPInt A_p[3] = {0, 2, 4};\n    OSQPFloat l[3] = {1.0, 0.0, 0.0};\n    OSQPFloat u[3] = {1.0, 0.7, 0.7};\n    OSQPInt n = 2;\n    OSQPInt m = 3;\n    OSQPInt exitflag = 0;\n    OSQPSolver *solver;\n    OSQPCscMatrix* P = OSQPCscMatrix_new(n, n, P_nnz, P_x, P_i, P_p);\n    OSQPCscMatrix* A = OSQPCscMatrix_new(m, n, A_nnz, A_x, A_i, A_p);\n    OSQPSettings *settings = OSQPSettings_new();\n    settings->alpha = 1.0;\n    exitflag = osqp_setup(&solver, P, q, A, l, u, m, n, settings);\n    if (!exitflag) exitflag = osqp_solve(solver);\n    osqp_cleanup(solver);\n    OSQPCscMatrix_free(A);\n    OSQPCscMatrix_free(P);\n    OSQPSettings_free(settings);\n    return exitflag;\n}",
    "metadata": {"problem_type": "QP"}
  },
  {
    "id": 2,
    "solver": "OSQP",
    "type": "Simple QP",
    "python_code": "import osqp\nimport numpy as np\nfrom scipy import sparse\n\n# Define problem data\nP = sparse.csc_matrix([\n    [4, 1, 0],\n    [1, 2, 0],\n    [0, 0, 3]\n])\nq = np.array([1, 1, 1])\nA = sparse.csc_matrix([\n    [1, 1, 0],\n    [0, 1, 1],\n    [1, 0, 1]\n])\nl = np.array([1, 0, 0])\nu = np.array([1, 0.7, 0.7])\n\n# Create an OSQP object\nprob = osqp.OSQP()\n\n# Setup workspace\nprob.setup(P, q, A, l, u, verbose=True)\n\n# Solve problem\nres = prob.solve()\n\n# Print results\nprint(\"Optimal variable values:\", res.x)\nprint(\"Optimal objective value:\", res.info.obj_val)",
    "c_code": "#include <stdio.h>\n#include <stdlib.h>\n#include \"osqp.h\"\n\nint main(void) {\n    OSQPInt n = 3;\n    OSQPInt m = 3;\n    OSQPFloat P_x[4] = {4.0, 1.0, 2.0, 3.0};\n    OSQPInt P_i[4] = {0, 1, 2};\n    OSQPInt P_p[4] = {0, 1, 3, 4};\n    OSQPFloat q[3] = {1.0, 1.0, 1.0};\n    OSQPFloat A_x[6] = {1.0, 1.0, 1.0, 1.0, 1.0, 1.0};\n    OSQPInt A_i[6] = {0, 1, 1, 2, 0, 2};\n    OSQPInt A_p[4] = {0, 2, 4, 6};\n    OSQPFloat l[3] = {1.0, 0.0, 0.0};\n    OSQPFloat u[3] = {1.0, 0.7, 0.7};\n    OSQPCscMatrix* P = OSQPCscMatrix_new(n, n, 4, P_x, P_i, P_p);\n    OSQPCscMatrix* A = OSQPCscMatrix_new(m, n, 6, A_x, A_i, A_p);\n    OSQPSettings* settings = OSQPSettings_new();\n    OSQPSolver* solver = NULL;\n    OSQPInt exitflag = 0;\n    if (!P || !A || !settings) {\n        if (P) OSQPCscMatrix_free(P);\n        if (A) OSQPCscMatrix_free(A);\n        if (settings) OSQPSettings_free(settings);\n        return 1;\n    }\n    settings->verbose = 1;\n    exitflag = osqp_setup(&solver, P, q, A, l, u, m, n, sett\tings);\n    if (!exitflag) exitflag = osqp_solve(solver);\n    if (solver && solver->info->status_val == OSQP_SOLVED) {\n        printf(\"Optimal variable values: [\");\n        for (OSQPInt i = 0; i < n; ++i) {\n            printf(\"%.4f%s\", solver->solution->x[i], (i == n - 1) ? \"\" : \", \");\n        }\n        printf(\"]\\n\");\n        printf(\"Optimal objective value: %.6f\\n\", solver->info->obj_val);\n    } else if (solver) {\n        printf(\"Solver failed with status: %s\\n\", solver->info->status);\n    }\n    osqp_cleanup(solver);\n    OSQPCscMatrix_free(P);\n    OSQPCscMatrix_free(A);\n    OSQPSettings_free(settings);\n    return exitflag;\n}",
    "metadata": {"problem_type": "QP"}
  },
  {
    "id": 3,
    "solver": "OSQP",
    "type": "Simple QP",
    "python_code": "import osqp\nimport numpy as np\nfrom scipy import sparse\n\n# Define problem data\nP = sparse.csc_matrix([\n    [4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [1, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 1, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 1, 6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 1, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 1, 5, 1, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 1, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 1, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 1, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 1],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3]\n])\n\nq = np.array([1, -2, 3, -1, 4, -3, 5, -4, 2, -1, 3, -2, 4, -3, 1])\n\nA = sparse.csc_matrix([\n    [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],\n    [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],\n    [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0],\n    [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1],\n    [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0]\n])\n\nl = np.array([0, -1, -0.5, -1.5, -0.2])\nu = np.array([2, 1.5, 1, 1.2, 1.8])\n\n# Create an OSQP object\nprob = osqp.OSQP()\n\n# Setup workspace\nprob.setup(P, q, A, l, u)\n\n# Solve problem\nres = prob.solve()\n\n# Print results\nprint(\"Optimal Solution:\", res.x)",
    "c_code": "#include <stdio.h>\n#include <stdlib.h>\n#include \"osqp.h\"\n\nint main(int argc, char **argv) {\n    OSQPInt n = 15;\n    OSQPInt m = 5;\n\n    OSQPFloat P_x[29] = {4.0,1.0,3.0,1.0,5.0,1.0,2.0,1.0,6.0,1.0,4.0,1.0,3.0,1.0,5.0,1.0,2.0,1.0,4.0,1.0,3.0,1.0,5.0,1.0,2.0,1.0,4.0,1.0,3.0};\n    OSQPInt P_i[29] = {0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14};\n    OSQPInt P_p[16] = {0,1,3,5,7,9,11,13,15,17,19,21,23,25,27,29};\n\n    OSQPFloat q[15] = {1.0,-2.0,3.0,-1.0,4.0,-3.0,5.0,-4.0,2.0,-1.0,3.0,-2.0,4.0,-3.0,1.0};\n\n    OSQPFloat A_x[37] = {1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0};\n    OSQPInt A_i[37] = {0,2,4,1,2,0,3,1,3,4,0,2,4,1,2,0,3,1,3,4,0,2,4,1,2,0,3,1,3,4,0,2,4,1,2,0,3};\n    OSQPInt A_p[16] = {0,3,5,7,10,13,15,17,20,23,25,27,30,33,35,37};\n\n    OSQPFloat l[5] = {0.0,-1.0,-0.5,-1.5,-0.2};\n    OSQPFloat u[5] = {2.0,1.5,1.0,1.2,1.8};\n\n    OSQPInt exitflag = 0;\n    OSQPSolver *solver = NULL;\n\n    OSQPCscMatrix* P = OSQPCscMatrix_new(n, n, 29, P_x, P_i, P_p);\n    OSQPCscMatrix* A = OSQPCscMatrix_new(m, n, 37, A_x, A_i, A_p);\n    OSQPSettings *settings = OSQPSettings_new();\n\n    if (!settings) {\n        if (P) OSQPCscMatrix_free(P);\n        if (A) OSQPCscMatrix_free(A);\n        return 1;\n    }\n\n    exitflag = osqp_setup(&solver, P, q, A, l, u, m, n, settings);\n\n    if (!exitflag) exitflag = osqp_solve(solver);\n\n    if (solver && solver->info->status_val == OSQP_SOLVED) {\n        printf(\"Optimal x: [\");\n        for (OSQPInt i = 0; i < n; ++i) {\n            printf(\"%.4f%s\", solver->solution->x[i], (i == n - 1) ? \"\" : \", \");\n        }\n        printf(\"]\\n\");\n    } else if (solver) {\n        printf(\"Solver failed with status: %s\\n\", solver->info->status);\n    }\n\n    osqp_cleanup(solver);\n    OSQPCscMatrix_free(P);\n    OSQPCscMatrix_free(A);\n    OSQPSettings_free(settings);\n\n    return (int)exitflag;\n}",
    "metadata": {"problem_type": "QP"}
  },
  {
    "id": 4,
    "solver": "OSQP",
    "type": "Portfolio Optimization",
    "python_code": "import osqp\nimport numpy as np\nfrom scipy import sparse\n\nn = 5\nmu = np.array([0.08, 0.12, 0.15, 0.09, 0.11])\nSigma = np.diag([0.1, 0.15, 0.2, 0.12, 0.18])\ntarget = 0.1\n\nP = sparse.csc_matrix(Sigma)\nq = np.zeros(n)\nA = sparse.csc_matrix(np.vstack((np.ones(n), mu, np.eye(n))))\nl = np.hstack((1, target, np.zeros(n)))\nu = np.hstack((1, target, np.ones(n)))\n\nprob = osqp.OSQP()\nprob.setup(P, q, A, l, u)\nres = prob.solve()\nprint(res.x)",
    "c_code": "#include <stdio.h>\n#include <stdlib.h>\n#include \"osqp.h\"\n\nint main(void) {\n    OSQPInt n = 5;\n    OSQPInt m = 7;\n\n    OSQPFloat P_x[] = {0.1, 0.15, 0.2, 0.12, 0.18};\n    OSQPInt P_i[] = {0, 1, 2, 3, 4};\n    OSQPInt P_p[] = {0, 1, 2, 3, 4, 5};\n    OSQPInt P_nnz = 5;\n\n    OSQPFloat q[] = {0.0, 0.0, 0.0, 0.0, 0.0};\n\n    OSQPFloat A_x[] = {1.0, 0.08, 1.0, 1.0, 0.12, 1.0, 1.0, 0.15, 1.0, 1.0, 0.09, 1.0, 1.0, 0.11, 1.0};\n    OSQPInt A_i[] = {0, 1, 2, 0, 1, 3, 0, 1, 4, 0, 1, 5, 0, 1, 6};\n    OSQPInt A_p[] = {0, 3, 6, 9, 12, 15};\n    OSQPInt A_nnz = 15;\n\n    OSQPFloat l[] = {1.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0};\n    OSQPFloat u[] = {1.0, 0.1, 1.0, 1.0, 1.0, 1.0, 1.0};\n\n    OSQPSolver* solver = NULL;\n    OSQPSettings* settings = NULL;\n    OSQPCscMatrix* P = NULL;\n    OSQPCscMatrix* A = NULL;\n    OSQPInt exitflag = 0;\n\n    settings = OSQPSettings_new();\n    if (!settings) {\n        fprintf(stderr, \"ERROR: Could not create OSQP settings!\\n\");\n        return 1;\n    }\n    osqp_set_default_settings(settings);\n\n    P = OSQPCscMatrix_new(n, n, P_nnz, P_x, P_i, P_p);\n    if (!P) {\n        fprintf(stderr, \"ERROR: Could not create P matrix!\\n\");\n        OSQPSettings_free(settings);\n        return 1;\n    }\n\n    A = OSQPCscMatrix_new(m, n, A_nnz, A_x, A_i, A_p);\n    if (!A) {\n        fprintf(stderr, \"ERROR: Could not create A matrix!\\n\");\n        OSQPCscMatrix_free(P);\n        OSQPSettings_free(settings);\n        return 1;\n    }\n\n    exitflag = osqp_setup(&solver, P, q, A, l, u, m, n, settings);\n    if (exitflag) {\n        fprintf(stderr, \"ERROR: OSQP setup failed with code %d!\\n\", (int)exitflag);\n    } else {\n        exitflag = osqp_solve(solver);\n        if (exitflag) {\n            fprintf(stderr, \"ERROR: OSQP solve failed with code %d!\\n\", (int)exitflag);\n        } else {\n            if (solver->info->status_val == OSQP_SOLVED || solver->info->status_val == OSQP_SOLVED_INACCURATE) {\n                FILE* f = fopen(\"c_results.txt\", \"w\");\n                if (f == NULL) {\n                    fprintf(stderr, \"Error opening file c_results.txt\\n\");\n                } else {\n                    fprintf(f, \"%.10e\\n\", solver->info->obj_val);\n                    fclose(f);\n                }\n            } else {\n                fprintf(stderr, \"Solver did not solve the problem. Status: %s\\n\", solver->info->status);\n                exitflag = 1;\n            }\n        }\n    }\n\n    osqp_cleanup(solver);\n    OSQPCscMatrix_free(P);\n    OSQPCscMatrix_free(A);\n    OSQPSettings_free(settings);\n\n    return (int)exitflag;\n}",
    "metadata": {"problem_type": "QP"}
  },
  {
    "id": 5,
    "solver": "OSQP",
    "type": "Portfolio Optimization",
    "python_code": "import osqp\nimport numpy as np\nfrom scipy import sparse\n\nn = 7\nmu = np.linspace(0.05, 0.25, n)\nSigma = np.diag(np.linspace(0.1, 0.3, n)) + 0.01\ntarget = 0.15\n\nP = sparse.csc_matrix(Sigma)\nq = np.zeros(n)\nA = sparse.csc_matrix(np.vstack((np.ones(n), mu, np.eye(n), [1,0,0,0,0,0,0])))\nl = np.hstack((1, target, np.zeros(n), 0.1))\nu = np.hstack((1, target, 0.3*np.ones(n), 0.3))\n\nprob = osqp.OSQP()\nprob.setup(P, q, A, l, u)\nres = prob.solve()\nprint(res.x)",
    "c_code": "#include <stdio.h>\n#include <stdlib.h>\n#include \"osqp.h\"\n\nint main(int argc, char **argv) {\n    OSQPInt n = 7;\n    OSQPInt m = 10;\n\n    OSQPFloat P_x[28] = {0.11, 0.01, 0.14333333, 0.01, 0.01, 0.17666667, 0.01, 0.01, 0.01, 0.21, 0.01, 0.01, 0.01, 0.01, 0.24333333, 0.01, 0.01, 0.01, 0.01, 0.01, 0.27666667, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.31};\n    OSQPInt P_nnz = 28;\n    OSQPInt P_i[28] = {0, 0, 1, 0, 1, 2, 0, 1, 2, 3, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 6};\n    OSQPInt P_p[8] = {0, 1, 3, 6, 10, 15, 21, 28};\n\n    OSQPFloat q[7] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};\n\n    OSQPFloat A_x[22] = {1.0, 0.05, 1.0, 1.0, 1.0, 0.08333333, 1.0, 1.0, 0.11666667, 1.0, 1.0, 0.15, 1.0, 1.0, 0.18333333, 1.0, 1.0, 0.21666667, 1.0, 1.0, 0.25, 1.0};\n    OSQPInt A_nnz = 22;\n    OSQPInt A_i[22] = {0, 1, 2, 9, 0, 1, 3, 0, 1, 4, 0, 1, 5, 0, 1, 6, 0, 1, 7, 0, 1, 8};\n    OSQPInt A_p[8] = {0, 4, 7, 10, 13, 16, 19, 22};\n\n    OSQPFloat l[10] = {1.0, 0.15, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1};\n    OSQPFloat u[10] = {1.0, 0.15, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3};\n\n    OSQPInt exitflag = 0;\n    OSQPSolver *solver = NULL;\n    OSQPSettings *settings = NULL;\n    OSQPCscMatrix* P = NULL;\n    OSQPCscMatrix* A = NULL;\n    FILE *f = NULL;\n\n    P = OSQPCscMatrix_new(n, n, P_nnz, P_x, P_i, P_p);\n    A = OSQPCscMatrix_new(m, n, A_nnz, A_x, A_i, A_p);\n    settings = OSQPSettings_new();\n\n    if (!P || !A || !settings) {\n        fprintf(stderr, \"Error allocating OSQP data structures.\\n\");\n        exitflag = 1;\n        goto cleanup;\n    }\n\n    exitflag = osqp_setup(&solver, P, q, A, l, u, m, n, settings);\n    if (exitflag) {\n        fprintf(stderr, \"OSQP setup failed with error code %d.\\n\", (int)exitflag);\n        goto cleanup;\n    }\n\n    exitflag = osqp_solve(solver);\n    if (exitflag) {\n        fprintf(stderr, \"OSQP solve failed with error code %d.\\n\", (int)exitflag);\n    }\n\n    if (solver && solver->info->status_val == OSQP_SOLVED) {\n        f = fopen(\"c_results.txt\", \"w\");\n        if (f == NULL) {\n            perror(\"Error opening file c_results.txt\");\n            exitflag = 1;\n        } else {\n            if (fprintf(f, \"%.17g\\n\", solver->info->obj_val) < 0) {\n                 perror(\"Error writing to file c_results.txt\");\n                 exitflag = 1;\n            }\n            if (fclose(f) != 0) {\n                 perror(\"Error closing file c_results.txt\");\n                 exitflag = 1;\n            }\n        }\n    } else if (solver) {\n        fprintf(stderr, \"Solver did not find an optimal solution. Status: %s\\n\", solver->info->status);\n        exitflag = 1;\n    } else {\n         fprintf(stderr, \"Solver object is NULL after setup.\\n\");\n         exitflag = 1;\n    }\n\ncleanup:\n    osqp_cleanup(solver);\n    if (A) OSQPCscMatrix_free(A);\n    if (P) OSQPCscMatrix_free(P);\n    if (settings) OSQPSettings_free(settings);\n\n    return (int)exitflag;\n}",
    "metadata": {"problem_type": "QP"}
  },
  {
    "id": 6,
    "solver": "OSQP",
    "type": "MPC",
    "python_code": "import osqp\nimport numpy as np\nfrom scipy import sparse\n\nn = 5\nA = np.eye(n) + 0.1*np.diag(np.ones(n-1), 1)\nB = np.eye(n)\nQ = np.eye(n)\nR = 0.1*np.eye(n)\nx0 = np.array([1, 0.5, -0.5, 0.2, -0.1])\n\nP = sparse.csc_matrix(2*(Q + R))\nq = -2*Q@x0\nA = sparse.csc_matrix(np.vstack((np.eye(n), -np.eye(n), B, -B)))\nl = np.hstack((-1*np.ones(n), -np.inf*np.ones(n), x0, -x0))\nu = np.hstack((1*np.ones(n), np.inf*np.ones(n), x0, -x0))\n\nprob = osqp.OSQP()\nprob.setup(P, q, A, l, u)\nres = prob.solve()\nprint(res.x)",
    "c_code": "#include <stdio.h>\n#include <stdlib.h>\n#include \"osqp.h\"\n\nint main(int argc, char **argv) {\n    OSQPInt n = 5;\n    OSQPInt m = 20;\n\n    OSQPFloat P_x[5] = {2.2, 2.2, 2.2, 2.2, 2.2};\n    OSQPInt P_nnz = 5;\n    OSQPInt P_i[5] = {0, 1, 2, 3, 4};\n    OSQPInt P_p[6] = {0, 1, 2, 3, 4, 5};\n\n    OSQPFloat q[5] = {-2.0, -1.0, 1.0, -0.4, 0.2};\n\n    OSQPFloat A_x[20] = {1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0};\n    OSQPInt A_nnz = 20;\n    OSQPInt A_i[20] = {0, 5, 10, 15, 1, 6, 11, 16, 2, 7, 12, 17, 3, 8, 13, 18, 4, 9, 14, 19};\n    OSQPInt A_p[6] = {0, 4, 8, 12, 16, 20};\n\n    OSQPFloat l[20] = {-1.0, -1.0, -1.0, -1.0, -1.0, -OSQP_INFTY, -OSQP_INFTY, -OSQP_INFTY, -OSQP_INFTY, -OSQP_INFTY, 1.0, 0.5, -0.5, 0.2, -0.1, -1.0, -0.5, 0.5, -0.2, 0.1};\n    OSQPFloat u[20] = {1.0, 1.0, 1.0, 1.0, 1.0, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, 1.0, 0.5, -0.5, 0.2, -0.1, -1.0, -0.5, 0.5, -0.2, 0.1};\n\n    OSQPInt exitflag = 0;\n    OSQPSolver *solver = NULL;\n    OSQPSettings *settings = NULL;\n    OSQPCscMatrix* P = NULL;\n    OSQPCscMatrix* A = NULL;\n    FILE *f = NULL;\n\n    P = OSQPCscMatrix_new(n, n, P_nnz, P_x, P_i, P_p);\n    A = OSQPCscMatrix_new(m, n, A_nnz, A_x, A_i, A_p);\n    settings = OSQPSettings_new();\n\n    if (!P || !A || !settings) {\n        fprintf(stderr, \"Error creating OSQP matrices or settings.\\n\");\n        if (P) OSQPCscMatrix_free(P);\n        if (A) OSQPCscMatrix_free(A);\n        if (settings) OSQPSettings_free(settings);\n        return 1;\n    }\n\n    exitflag = osqp_setup(&solver, P, q, A, l, u, m, n, settings);\n    if (exitflag) {\n        fprintf(stderr, \"OSQP setup failed with error code %d.\\n\", exitflag);\n        osqp_cleanup(solver);\n        OSQPCscMatrix_free(P);\n        OSQPCscMatrix_free(A);\n        OSQPSettings_free(settings);\n        return (int)exitflag;\n    }\n\n    exitflag = osqp_solve(solver);\n    if (exitflag) {\n         fprintf(stderr, \"OSQP solve failed with error code %d.\\n\", exitflag);\n    }\n\n    if (solver && solver->info->status_val == OSQP_SOLVED) {\n        f = fopen(\"c_results.txt\", \"w\");\n        if (f == NULL) {\n            fprintf(stderr, \"Error opening file c_results.txt for writing.\\n\");\n        } else {\n            fprintf(f, \"%.10e\\n\", solver->info->obj_val);\n            fclose(f);\n        }\n    } else if (solver) {\n        fprintf(stderr, \"Solver did not find an optimal solution. Status: %s\\n\", solver->info->status);\n    } else {\n         fprintf(stderr, \"Solver object is NULL after setup/solve.\\n\");\n    }\n\n    osqp_cleanup(solver);\n    OSQPCscMatrix_free(P);\n    OSQPCscMatrix_free(A);\n    OSQPSettings_free(settings);\n\n    return (int)exitflag;\n}",
    "metadata": {"problem_type": "QP"}
  },
  {
    "id": 7,
    "solver": "OSQP",
    "type": "MPC",
    "python_code": "import osqp\nimport numpy as np\nfrom scipy import sparse\n\nn = 7\nA = np.eye(n) + 0.05*np.diag(np.ones(n-1), 1)\nB = np.eye(n)\nQ = np.diag(np.arange(1,n+1))\nR = 0.2*np.eye(n)\nx0 = np.random.randn(n)\n\nP = sparse.csc_matrix(2*(Q + R))\nq = -2*Q@x0\nA = sparse.csc_matrix(np.vstack((\n    np.eye(n),\n    -np.eye(n),\n    B,\n    -B,\n    np.random.randn(1,n)\n)))\nl = np.hstack((-2*np.ones(n), -np.inf*np.ones(n), x0, -x0, -0.5))\nu = np.hstack((2*np.ones(n), np.inf*np.ones(n), x0, -x0, 0.5))\n\nprob = osqp.OSQP()\nprob.setup(P, q, A, l, u)\nres = prob.solve()\nprint(res.x)",
    "c_code": "#include <stdio.h>\n#include <stdlib.h>\n#include \"osqp.h\"\n\nint main(int argc, char **argv) {\n    OSQPInt n = 7;\n    OSQPInt m = 29;\n\n    OSQPFloat P_x[7] = { 2.4,  4.4,  6.4,  8.4, 10.4, 12.4, 14.4};\n    OSQPInt P_nnz = 7;\n    OSQPInt P_i[7] = {0, 1, 2, 3, 4, 5, 6};\n    OSQPInt P_p[8] = {0, 1, 2, 3, 4, 5, 6, 7};\n\n    OSQPFloat q[7] = {  1.52049621,   0.41283485,   8.77310806,   3.59922471,  -7.04086228, -11.69048141,  -6.8743102 };\n\n    OSQPFloat A_x[35] = { 1.0, -1.0,  1.0, -1.0, -0.40184514,  1.0, -1.0,  1.0, -1.0,  1.91929215,  1.0, -1.0,  1.0, -1.0, -0.56122785,  1.0, -1.0,  1.0, -1.0,  0.02796378,  1.0, -1.0,  1.0, -1.0,  1.66308919,  1.0, -1.0,  1.0, -1.0, -0.06618648,  1.0, -1.0,  1.0, -1.0,  0.4163885 };\n    OSQPInt A_nnz = 35;\n    OSQPInt A_i[35] = { 0,  7, 14, 21, 28,  1,  8, 15, 22, 28,  2,  9, 16, 23, 28,  3, 10, 17, 24, 28,  4, 11, 18, 25, 28,  5, 12, 19, 26, 28,  6, 13, 20, 27, 28};\n    OSQPInt A_p[8] = { 0,  5, 10, 15, 20, 25, 30, 35};\n\n    OSQPFloat l[29] = {-2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -OSQP_INFTY, -OSQP_INFTY, -OSQP_INFTY, -OSQP_INFTY, -OSQP_INFTY, -OSQP_INFTY, -OSQP_INFTY, -0.76024811, -0.10320871, -1.46218468, -0.44990309,  0.70408623,  0.97420678,  0.49102216,  0.76024811,  0.10320871,  1.46218468,  0.44990309, -0.70408623, -0.97420678, -0.49102216, -0.5 };\n    OSQPFloat u[29] = { 2.0,  2.0,  2.0,  2.0,  2.0,  2.0,  2.0,  OSQP_INFTY,  OSQP_INFTY,  OSQP_INFTY,  OSQP_INFTY,  OSQP_INFTY,  OSQP_INFTY,  OSQP_INFTY, -0.76024811, -0.10320871, -1.46218468, -0.44990309,  0.70408623,  0.97420678,  0.49102216,  0.76024811,  0.10320871,  1.46218468,  0.44990309, -0.70408623, -0.97420678, -0.49102216,  0.5 };\n\n    OSQPInt exitflag = 0;\n    OSQPSolver *solver = NULL;\n    OSQPSettings *settings = NULL;\n    OSQPCscMatrix* P = NULL;\n    OSQPCscMatrix* A = NULL;\n    FILE* f = NULL;\n\n    P = OSQPCscMatrix_new(n, n, P_nnz, P_x, P_i, P_p);\n    A = OSQPCscMatrix_new(m, n, A_nnz, A_x, A_i, A_p);\n    settings = OSQPSettings_new();\n\n    if (!P || !A || !settings) {\n        exitflag = 1;\n        goto cleanup;\n    }\n\n    exitflag = osqp_setup(&solver, P, q, A, l, u, m, n, settings);\n    if (exitflag) {\n        exitflag = 1;\n        goto cleanup;\n    }\n\n    exitflag = osqp_solve(solver);\n    if (exitflag) {\n         exitflag = 1;\n         goto cleanup;\n    }\n\n    if (solver && solver->info->status_val == OSQP_SOLVED) {\n        f = fopen(\"c_results.txt\", \"w\");\n        if (f == NULL) {\n            fprintf(stderr, \"Error opening file c_results.txt\\n\");\n            exitflag = 1;\n        } else {\n            fprintf(f, \"%.10e\\n\", solver->info->obj_val);\n            fclose(f);\n        }\n    } else if (solver) {\n         fprintf(stderr, \"Solver failed with status: %s\\n\", solver->info->status);\n         exitflag = 1;\n    } else {\n         fprintf(stderr, \"Solver object is NULL after solve attempt.\\n\");\n         exitflag = 1;\n    }\n\ncleanup:\n    if (solver) osqp_cleanup(solver);\n    if (A) OSQPCscMatrix_free(A);\n    if (P) OSQPCscMatrix_free(P);\n    if (settings) OSQPSettings_free(settings);\n\n    return (int)exitflag;\n}",
    "metadata": {"problem_type": "QP"}
  },
  {
    "id": 8,
    "solver": "OSQP",
    "type": "SVM",
    "python_code": "import osqp\nimport numpy as np\nfrom scipy import sparse\n\nnp.random.seed(1)\nn = 6\nX = np.random.randn(n, 2)\ny = 2*(np.random.rand(n) > 0.5) - 1\nC = 1.0\n\nP = sparse.block_diag([sparse.eye(2), sparse.csc_matrix((n+1, n+1))]) + 1e-6*sparse.eye(2+n+1)\nq = np.hstack([np.zeros(3), C*np.ones(n)])\nA = sparse.vstack([\n    sparse.hstack([sparse.diags(y)@X, y.reshape(-1,1), sparse.eye(n)]),\n    sparse.eye(2+n+1)\n])\nl = np.hstack([np.ones(n), np.zeros(2+n+1)])\nu = np.hstack([np.inf*np.ones(n), np.inf*np.ones(2+n+1)])\n\nprob = osqp.OSQP()\nprob.setup(P, q, A, l, u)\nres = prob.solve()\nprint(\"Weights:\", res.x[:2], \"Bias:\", res.x[2])",
    "c_code": "#include <stdio.h>\n#include <stdlib.h>\n#include \"osqp.h\"\n\nint main(int argc, char **argv) {\n    OSQPInt n = 9;\n    OSQPInt m = 15;\n\n    OSQPFloat P_x[9] = {1.000001e+00, 1.000001e+00, 1.000000e-06, 1.000000e-06, 1.000000e-06, 1.000000e-06, 1.000000e-06, 1.000000e-06, 1.000000e-06};\n    OSQPInt P_nnz = 9;\n    OSQPInt P_i[9] = {0, 1, 2, 3, 4, 5, 6, 7, 8};\n    OSQPInt P_p[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n\n    OSQPFloat q[9] = {0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};\n\n    OSQPFloat A_x[33] = {-1.62434536, 0.52817175, 0.86540763, 1.74481176, -0.3190391, 1.46210794, 1.0, 0.61175641, 1.07296862, -2.3015387, -0.7612069, 0.24937038, -2.06014071, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};\n    OSQPInt A_nnz = 33;\n    OSQPInt A_i[33] = {0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 7, 0, 1, 2, 3, 4, 5, 8, 0, 9, 1, 10, 2, 11, 3, 12, 4, 13, 5, 14};\n    OSQPInt A_p[10] = {0, 7, 14, 21, 23, 25, 27, 29, 31, 33};\n\n    OSQPFloat l[15] = {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};\n    OSQPFloat u[15] = {OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY};\n\n    OSQPInt exitflag = 0;\n    OSQPSolver *solver = NULL;\n    OSQPSettings *settings = NULL;\n    OSQPCscMatrix* P = NULL;\n    OSQPCscMatrix* A = NULL;\n    FILE *f = NULL;\n\n    P = OSQPCscMatrix_new(n, n, P_nnz, P_x, P_i, P_p);\n    A = OSQPCscMatrix_new(m, n, A_nnz, A_x, A_i, A_p);\n    settings = OSQPSettings_new();\n\n    if (!P || !A || !settings) {\n        exitflag = 1;\n        goto cleanup;\n    }\n\n    exitflag = osqp_setup(&solver, P, q, A, l, u, m, n, settings);\n    if (exitflag) {\n       exitflag = 1;\n       goto cleanup;\n    }\n\n    exitflag = osqp_solve(solver);\n     if (exitflag) {\n       exitflag = 1;\n       goto cleanup;\n    }\n\n    if (solver && solver->info->status_val == OSQP_SOLVED) {\n        f = fopen(\"c_results.txt\", \"w\");\n        if (f) {\n            fprintf(f, \"%.10e\\n\", solver->info->obj_val);\n            fclose(f);\n        } else {\n             exitflag = 1;\n        }\n    } else {\n         exitflag = 1;\n    }\n\ncleanup:\n    if (solver) osqp_cleanup(solver);\n    if (A) OSQPCscMatrix_free(A);\n    if (P) OSQPCscMatrix_free(P);\n    if (settings) OSQPSettings_free(settings);\n\n    return (int)exitflag;\n}",
    "metadata": {"problem_type": "QP"}
  },
  {
    "id": 9,
    "solver": "OSQP",
    "type": "SVM",
    "python_code": "import osqp\nimport numpy as np\nfrom scipy import sparse\n\nn = 8\nX = np.random.randn(n, 3)\ny = 2*(np.random.rand(n) > 0.5) - 1\nC = 0.8\n\nP = sparse.block_diag([sparse.eye(3), sparse.csc_matrix((n+1, n+1))]) + 1e-6*sparse.eye(3+n+1)\nq = np.hstack([np.zeros(4), C*np.ones(n)])\nA = sparse.vstack([\n    sparse.hstack([sparse.diags(y)@X, y.reshape(-1,1), sparse.eye(n)]),\n    sparse.eye(3+n+1),\n    sparse.random(2, 3+n+1, density=0.5)\n])\nl = np.hstack([np.ones(n), np.zeros(3+n+1), -0.1*np.ones(2)])\nu = np.hstack([np.inf*np.ones(n), np.inf*np.ones(3+n+1), 0.1*np.ones(2)])\n\nprob = osqp.OSQP()\nprob.setup(P, q, A, l, u)\nres = prob.solve()\nprint(\"Weights:\", res.x[:3], \"Bias:\", res.x[3])",
    "c_code": "#include <stdio.h>\n#include <stdlib.h>\n#include \"osqp.h\"\n\n\nint main(void) {\n    // Problem dimensions\n    OSQPInt n = 12;\n    OSQPInt m = 22;\n\n\n    // P matrix data (CSC, upper triangular)\n    OSQPFloat P_x[12] = {1.000001e+00, 1.000001e+00, 1.000001e+00, 1.000000e-06, 1.000000e-06,\n        1.000000e-06, 1.000000e-06, 1.000000e-06, 1.000000e-06, 1.000000e-06,\n        1.000000e-06, 1.000000e-06};\n    OSQPInt P_i[12] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\n    OSQPInt P_p[13] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n\n\n    // q vector\n    OSQPFloat q[12] = {0.0, 0.0, 0.0, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.0};\n\n\n    // A matrix data (CSC)\n    OSQPFloat A_x[64] = {-0.79681979, 1.02378477, -0.36383331, 0.75506169, -2.29715563, 1.11948359,\n        -0.07796219, -0.20047835, 1., 0.28311332, 0.35970196, -0.14922964,\n        0.2541016, 0.59516246, -2.46395428, 0.70750205, 0.00299937, -2.81744474,\n        1., 0.80336538, 1.04182563, -0.84160998, -0.39933374, 0.77033386,\n        0.48221686, -0.64666373, 0.49717395, 0.73961105, 1., 0.89344874,\n        1., -1., -1., -1., -1., -1.,\n        1., 1., 1., 0.66238099, 1., 1.,\n        1., 1., 0.41252963, 1., 1., 0.26232969,\n        1., 1., 0.93443711, 0.67280118, 1., 1.,\n        0.46033768, 1., 1., 1., 1., 0.91435416,\n        1., 1., 0.91557187, 0.86768764};\n    OSQPInt A_i[64] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 20, 0, 1, 2, 3, 4, 5, 6, 7, 9, 20, 0, 1, 2, 3, 4, 5, 6, 7, 10, 20, 0, 1, 2, 3, 4, 5, 6, 7, 11, 20, 0, 12, 1, 13, 20, 2, 14, 21, 3, 15, 20, 21, 4, 16, 20, 5, 17, 6, 18, 20, 7, 19, 20, 21};\n    OSQPInt A_p[13] = {0, 10, 20, 30, 40, 42, 45, 48, 52, 55, 57, 60, 64};\n\n\n    // Lower and upper bounds\n    OSQPFloat l[22] = {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1, -0.1};\n    OSQPFloat u[22] = {OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, 0.1, 0.1};\n\n\n    // Create CSC matrices\n    OSQPCscMatrix* P = OSQPCscMatrix_new(n, n, 12, P_x, P_i, P_p);\n    OSQPCscMatrix* A = OSQPCscMatrix_new(m, n, 22, A_x, A_i, A_p);\n\n\n    // Solver settings\n    OSQPSettings* settings = OSQPSettings_new();\n    if (!settings) {\n        fprintf(stderr, \"Error: Failed to create OSQP settings\");\n        OSQPCscMatrix_free(P);\n        OSQPCscMatrix_free(A);\n        return 1;\n    }\n    osqp_set_default_settings(settings);\n    settings->verbose = 1;\n\n\n    // Solver\n    OSQPSolver* solver = NULL;\n    OSQPInt exitflag = osqp_setup(&solver, P, q, A, l, u, m, n, settings);\n\n\n    if (exitflag) {\n        fprintf(stderr, \"Error: OSQP setup failed with error code %d\", (int)exitflag);\n        OSQPCscMatrix_free(P);\n        OSQPCscMatrix_free(A);\n        OSQPSettings_free(settings);\n        return 1;\n    }\n\n\n    // Solve problem\n    exitflag = osqp_solve(solver);\n\n\n    if (exitflag) {\n        fprintf(stderr, \"Error: OSQP solve failed with error code %d\", (int)exitflag);\n    } else {\n        printf(\"Weights: [%f, %f, %f] Bias: %f\", solver->solution->x[0], solver->solution->x[1], solver->solution->x[2], solver->solution->x[3]);        \nprintf(\"Optimal objective value: %.16f\", solver->info->obj_val);\n\n\n        // Save optimal value to file\n        FILE* f = fopen(\"c_results.txt\", \"w\");\n        if (f) {\n            fprintf(f, \"%.16f\", solver->info->obj_val);\n            fclose(f);\n        } else {\n            fprintf(stderr, \"Error: Could not open file for writing results\");\n        }\n    }\n\n\n    // Cleanup\n    osqp_cleanup(solver);\n    OSQPCscMatrix_free(P);\n    OSQPCscMatrix_free(A);\n    OSQPSettings_free(settings);\n\n\n    return (int)exitflag;\n}",
    "metadata": {"problem_type": "QP"}
  },
  {
    "id": 10,
    "solver": "OSQP",
    "type": "Huber",
    "python_code": "import osqp\nimport numpy as np\nfrom scipy import sparse\n\nnp.random.seed(1)\nm, n = 10, 5\nA = np.random.randn(m, n)\nb = np.random.randn(m)\nM = 1.5\n\nP = sparse.block_diag([sparse.csc_matrix((n,n)), 2*sparse.eye(m)])\nq = np.hstack([np.zeros(n), np.ones(m)])\nA = sparse.vstack([\n    sparse.hstack([A, -sparse.eye(m)]),\n    sparse.hstack([A, sparse.eye(m)]),\n    sparse.hstack([sparse.csc_matrix((m,n)), sparse.eye(m)])\n])\nl = np.hstack([b, -np.inf*np.ones(m), np.zeros(m)])\nu = np.hstack([b, b, M*np.ones(m)])\n\nprob = osqp.OSQP()\nprob.setup(P, q, A, l, u)\nres = prob.solve()\nprint(res.x[:n])",
    "c_code": "#include <stdio.h>\n#include <stdlib.h>\n#include \"osqp.h\"\n\nint main(int argc, char **argv) {\n    OSQPInt N = 15;\n    OSQPInt M = 30;\n\n    OSQPFloat P_x[10] = {2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0};\n    OSQPInt P_nnz = 10;\n    OSQPInt P_i[10] = {5, 6, 7, 8, 9, 10, 11, 12, 13, 14};\n    OSQPInt P_p[16] = {0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\n    OSQPFloat q[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};\n\n    OSQPFloat A_x[130] = { ... }; // omitted for brevity\n    OSQPInt A_nnz = 130;\n    OSQPInt A_i[130] = { ... }; // omitted for brevity\n    OSQPInt A_p[16] = { ... }; // omitted for brevity\n\n    OSQPFloat l[30] = { ... }; // omitted for brevity\n    OSQPFloat u[30] = { ... }; // omitted for brevity\n\n    OSQPInt exitflag = 0;\n    OSQPSolver *solver = NULL;\n    OSQPSettings *settings = NULL;\n    OSQPCscMatrix* P = NULL;\n    OSQPCscMatrix* A = NULL;\n    FILE* f = NULL;\n\n    P = OSQPCscMatrix_new(N, N, P_nnz, P_x, P_i, P_p);\n    A = OSQPCscMatrix_new(M, N, A_nnz, A_x, A_i, A_p);\n    settings = OSQPSettings_new();\n\n    if (!P || !A || !settings) {\n        exitflag = 1;\n        goto cleanup;\n    }\n\n    exitflag = osqp_setup(&solver, P, q, A, l, u, M, N, settings);\n    if (exitflag) {\n        exitflag = 1;\n        goto cleanup;\n    }\n\n    exitflag = osqp_solve(solver);\n    if (exitflag) {\n         exitflag = 1;\n         goto cleanup;\n    }\n\n    if (solver && solver->info->status_val == OSQP_SOLVED) {\n         f = fopen(\"c_results.txt\", \"w\");\n         if (f == NULL) {\n             printf(\"Error opening file!\\n\");\n             exitflag = 1;\n             goto cleanup;\n         }\n         fprintf(f, \"%.16e\\n\", solver->info->obj_val);\n         fclose(f);\n         f = NULL;\n    } else if (solver) {\n         printf(\"Solver failed with status: %s\\n\", solver->info->status);\n         exitflag = 1;\n    } else {\n         exitflag = 1;\n    }\n\ncleanup:\n    if (solver) osqp_cleanup(solver);\n    if (A) OSQPCscMatrix_free(A);\n    if (P) OSQPCscMatrix_free(P);\n    if (settings) OSQPSettings_free(settings);\n    if (f) fclose(f);\n\n    return (int)exitflag;\n}",
    "metadata": {"problem_type": "QP"}
  },
  {
    "id": 11,
    "solver": "OSQP",
    "type": "Huber",
    "python_code": "import osqp\nimport numpy as np\nfrom scipy import sparse\n\nnp.random.seed(1)\nm, n = 5, 2  \nX = np.random.randn(m, n)\ny = np.random.randn(m)\nM = 1.5\n\nP = sparse.block_diag([sparse.csc_matrix((n,n)), 2*sparse.eye(m)], format='csc')\nq = np.hstack([np.zeros(n), np.ones(m)])\nA = sparse.vstack([\n    sparse.hstack([X, -sparse.eye(m)]),\n    sparse.hstack([X, sparse.eye(m)]),\n    sparse.hstack([sparse.csc_matrix((m,n)), sparse.eye(m)])\n], format='csc')\nl = np.hstack([y, -np.inf*np.ones(m), np.zeros(m)])\nu = np.hstack([y, y, M*np.ones(m)])\n\nprob = osqp.OSQP()\nprob.setup(P, q, A, l, u)\nres = prob.solve()\nprint(\"Coefficients:\", res.x[:n])",
    "c_code": "#include <stdio.h>\n#include <stdlib.h>\n#include \"osqp.h\"\n\nint main(int argc, char **argv) {\n    OSQPInt n = 7;\n    OSQPInt m = 15;\n\n    OSQPFloat P_x[5] = {2.0, 2.0, 2.0, 2.0, 2.0};\n    OSQPInt P_nnz = 5;\n    OSQPInt P_i[5] = {2, 3, 4, 5, 6};\n    OSQPInt P_p[8] = {0, 0, 0, 1, 2, 3, 4, 5};\n\n    OSQPFloat q[7] = {0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0};\n\n    OSQPFloat A_x[35] = { 1.62434536, -0.52817175,  0.86540763,  1.74481176,  0.3190391 ,  1.62434536,\n                         -0.52817175,  0.86540763,  1.74481176,  0.3190391 , -0.61175641, -1.07296862,\n                         -2.3015387 , -0.7612069 , -0.24937038, -0.61175641, -1.07296862, -2.3015387 ,\n                         -0.7612069 , -0.24937038, -1.0,  1.0,  1.0, -1.0,  1.0,  1.0, -1.0,  1.0,\n                          1.0, -1.0,  1.0,  1.0, -1.0,  1.0,  1.0};\n    OSQPInt A_nnz = 35;\n    OSQPInt A_i[35] = { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  0,  5, 10,  1,\n                        6, 11,  2,  7, 12,  3,  8, 13,  4,  9, 14};\n    OSQPInt A_p[8] = {0, 10, 20, 23, 26, 29, 32, 35};\n\n    OSQPFloat l[15] = { 1.46210794, -2.06014071, -0.3224172 , -0.38405435,  1.13376944,\n                       -OSQP_INFTY, -OSQP_INFTY, -OSQP_INFTY, -OSQP_INFTY, -OSQP_INFTY,\n                        0.0, 0.0, 0.0, 0.0, 0.0};\n    OSQPFloat u[15] = { 1.46210794, -2.06014071, -0.3224172 , -0.38405435,  1.13376944,\n                        1.46210794, -2.06014071, -0.3224172 , -0.38405435,  1.13376944,\n                        1.5, 1.5, 1.5, 1.5, 1.5};\n\n    OSQPInt exitflag = 0;\n    OSQPSolver *solver = NULL;\n    OSQPSettings *settings = NULL;\n    OSQPCscMatrix* P = NULL;\n    OSQPCscMatrix* A = NULL;\n    FILE *f = NULL;\n\n    P = OSQPCscMatrix_new(n, n, P_nnz, P_x, P_i, P_p);\n    A = OSQPCscMatrix_new(m, n, A_nnz, A_x, A_i, A_p);\n    settings = OSQPSettings_new();\n\n    if (!P || !A || !settings) {\n        exitflag = 1;\n        goto cleanup;\n    }\n\n    exitflag = osqp_setup(&solver, P, q, A, l, u, m, n, settings);\n    if (exitflag) {\n        exitflag = 1;\n        goto cleanup;\n    }\n\n    exitflag = osqp_solve(solver);\n    if (exitflag) {\n         exitflag = 1;\n         goto cleanup;\n    }\n\n    if (solver && solver->info->status_val == OSQP_SOLVED) {\n        f = fopen(\"c_results.txt\", \"w\");\n        if (f) {\n            fprintf(f, \"%.10e\\n\", solver->info->obj_val);\n            fclose(f);\n        } else {\n             exitflag = 1;\n        }\n    } else {\n         exitflag = 1;\n    }\n\ncleanup:\n    if (solver) osqp_cleanup(solver);\n    if (P) OSQPCscMatrix_free(P);\n    if (A) OSQPCscMatrix_free(A);\n    if (settings) OSQPSettings_free(settings);\n\n    return (int)exitflag;\n}",
    "metadata": {"problem_type": "QP"}
  },
  {
    "id": 12,
    "solver": "OSQP",
    "type": "Quadratic Program with Mixed Constraints",
    "python_code": "import osqp\nimport numpy as np\nfrom scipy import sparse\n\nn = 3\nP = sparse.csc_matrix([[4, 1, 0], [1, 2, 1], [0, 1, 3]])\nq = np.array([1, -2, 3])\nA = sparse.csc_matrix([\n    [1, 1, 1],   # sum <= 5\n    [2, -1, 0],  # 2x - y >= 1\n    [1, 0, 0],   # x <= 2\n    [0, 1, 0],   # y >= 0\n    [0, 0, 1]    # z <= 3\n])\nl = np.array([-np.inf, 1, -np.inf, 0, -np.inf])\nu = np.array([5, np.inf, 2, np.inf, 3])\n\nprob = osqp.OSQP()\nprob.setup(P, q, A, l, u)\nres = prob.solve()",
    "c_code": "#include <stdio.h>\n#include <stdlib.h>\n#include \"osqp.h\"\n\nint main(int argc, char **argv) {\n    OSQPInt n = 3;\n    OSQPInt m = 5;\n\n    OSQPFloat P_x[5] = {4.0, 1.0, 2.0, 1.0, 3.0};\n    OSQPInt P_nnz = 5;\n    OSQPInt P_i[5] = {0, 0, 1, 1, 2};\n    OSQPInt P_p[4] = {0, 1, 3, 5};\n\n    OSQPFloat q[3] = {1.0, -2.0, 3.0};\n\n    OSQPFloat A_x[8] = {1.0, 2.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0};\n    OSQPInt A_nnz = 8;\n    OSQPInt A_i[8] = {0, 1, 2, 0, 1, 3, 0, 4};\n    OSQPInt A_p[4] = {0, 3, 6, 8};\n\n    OSQPFloat l[5] = {-OSQP_INFTY, 1.0, -OSQP_INFTY, 0.0, -OSQP_INFTY};\n    OSQPFloat u[5] = {5.0, OSQP_INFTY, 2.0, OSQP_INFTY, 3.0};\n\n    OSQPInt exitflag = 0;\n    OSQPSolver *solver = NULL;\n    OSQPSettings *settings = NULL;\n    OSQPCscMatrix* P = NULL;\n    OSQPCscMatrix* A = NULL;\n    FILE *f = NULL;\n\n    P = OSQPCscMatrix_new(n, n, P_nnz, P_x, P_i, P_p);\n    A = OSQPCscMatrix_new(m, n, A_nnz, A_x, A_i, A_p);\n    settings = OSQPSettings_new();\n\n    if (!P || !A || !settings) {\n        exitflag = 1;\n        goto cleanup;\n    }\n\n    exitflag = osqp_setup(&solver, P, q, A, l, u, m, n, settings);\n    if (exitflag) {\n        goto cleanup;\n    }\n\n    exitflag = osqp_solve(solver);\n    if (exitflag) {\n        goto cleanup;\n    }\n\n    if (solver && solver->info->status_val == OSQP_SOLVED) {\n        f = fopen(\"c_results.txt\", \"w\");\n        if (f) {\n            fprintf(f, \"%.10e\\n\", solver->info->obj_val);\n            fclose(f);\n        } else {\n             fprintf(stderr, \"Error opening file c_results.txt\\n\");\n             exitflag = 1;\n        }\n    } else if (solver) {\n         fprintf(stderr, \"Solver failed with status: %s\\n\", solver->info->status);\n         exitflag = 1;\n    } else {\n         fprintf(stderr, \"Solver object is NULL after solve attempt.\\n\");\n         exitflag = 1;\n    }\n\ncleanup:\n    if (solver) osqp_cleanup(solver);\n    if (P) OSQPCscMatrix_free(P);\n    if (A) OSQPCscMatrix_free(A);\n    if (settings) OSQPSettings_free(settings);\n\n    return (int)exitflag;\n}",
    "metadata": {"problem_type": "QP"}
  },
  {
    "id": 13,
    "solver": "OSQP",
    "type": "Quadratic Program with Mixed Constraints",
    "python_code": "import osqp\nimport numpy as np\nfrom scipy import sparse\n\nn = 5\nP = sparse.diags([1,2,3,2,1], format='csc')\nq = np.array([1, -1, 2, 0, -2])\nA = sparse.vstack([\n    sparse.eye(n),\n    sparse.csc_matrix([[1,1,0,0,0], [0,0,1,1,1]])\n], format='csc')\nl = np.hstack([-2*np.ones(n), 1, -np.inf])\nu = np.hstack([2*np.ones(n), 3, 5])\n\nprob = osqp.OSQP()\nprob.setup(P, q, A, l, u)\nres = prob.solve()\nprint(res.x)",
    "c_code": "#include <stdio.h>\n#include <stdlib.h>\n#include \"osqp.h\"\n\nint main(int argc, char **argv) {\n    OSQPInt n = 5;\n    OSQPInt m = 7;\n\n    OSQPFloat P_x[5] = {1.0, 2.0, 3.0, 2.0, 1.0};\n    OSQPInt P_nnz = 5;\n    OSQPInt P_i[5] = {0, 1, 2, 3, 4};\n    OSQPInt P_p[6] = {0, 1, 2, 3, 4, 5};\n\n    OSQPFloat q[5] = {1.0, -1.0, 2.0, 0.0, -2.0};\n\n    OSQPFloat A_x[10] = {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};\n    OSQPInt A_nnz = 10;\n    OSQPInt A_i[10] = {0, 5, 1, 5, 2, 6, 3, 6, 4, 6};\n    OSQPInt A_p[6] = {0, 2, 4, 6, 8, 10};\n\n    OSQPFloat l[7] = {-2.0, -2.0, -2.0, -2.0, -2.0, 1.0, -OSQP_INFTY};\n    OSQPFloat u[7] = {2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 5.0};\n\n    OSQPInt exitflag = 0;\n    OSQPSolver *solver = NULL;\n    OSQPSettings *settings = NULL;\n    OSQPCscMatrix* P = NULL;\n    OSQPCscMatrix* A = NULL;\n    FILE *f = NULL;\n\n    P = OSQPCscMatrix_new(n, n, P_nnz, P_x, P_i, P_p);\n    A = OSQPCscMatrix_new(m, n, A_nnz, A_x, A_i, A_p);\n    settings = OSQPSettings_new();\n\n    if (!P || !A || !settings) {\n        exitflag = 1;\n        goto cleanup;\n    }\n\n    exitflag = osqp_setup(&solver, P, q, A, l, u, m, n, settings);\n    if (exitflag) {\n       goto cleanup;\n    }\n\n    exitflag = osqp_solve(solver);\n\n    if (solver && solver->info->status_val == OSQP_SOLVED) {\n        f = fopen(\"c_results.txt\", \"w\");\n        if (f) {\n            fprintf(f, \"%.16e\\n\", solver->info->obj_val);\n            fclose(f);\n        } else {\n             fprintf(stderr, \"Error opening file c_results.txt for writing.\\n\");\n             exitflag = 1;\n        }\n    } else if (solver) {\n         fprintf(stderr, \"Solver failed with status: %s\\n\", solver->info->status);\n         exitflag = 1;\n    } else {\n         fprintf(stderr, \"Solver object is NULL after solve attempt.\\n\");\n         exitflag = 1;\n    }\n\ncleanup:\n    if (solver) osqp_cleanup(solver);\n    if (A) OSQPCscMatrix_free(A);\n    if (P) OSQPCscMatrix_free(P);\n    if (settings) OSQPSettings_free(settings);\n\n    return (int)exitflag;\n}",
    "metadata": {"problem_type": "QP"}
  },
  {
    "id": 14,
    "solver": "OSQP",
    "type": "Lasso",
    "python_code": "import osqp\nimport numpy as np\nfrom scipy import sparse\n\nnp.random.seed(2)\nm, n = 10, 4\nX = np.random.randn(m, n)\ny = np.random.randn(m)\nlam = 0.5\n\nP = sparse.block_diag([X.T@X, X.T@X], format='csc')\nq = np.hstack([-X.T@y, X.T@y]) + lam*np.ones(2*n)\nA = sparse.vstack([\n    sparse.hstack([sparse.eye(n), -sparse.eye(n)]),\n    sparse.eye(2*n)\n], format='csc')\nl = np.hstack([np.zeros(n), np.zeros(2*n)])\nu = np.hstack([np.inf*np.ones(n), np.inf*np.ones(2*n)])\n\nprob = osqp.OSQP()\nprob.setup(P, q, A, l, u)\nres = prob.solve()\nprint(\"Beta:\", res.x[:n] - res.x[n:])",
    "c_code": "#include <stdio.h>\n#include <stdlib.h>\n#include \"osqp.h\"\n\nint main(int argc, char **argv) {\n    OSQPInt n = 8;\n    OSQPInt m = 12;\n\n    OSQPFloat P_x[20] = {13.59713871, 2.16324251, 4.99760396, -1.08711975, -2.09223717, 6.65227299, -5.83905709, -0.66256752, -2.78733462, 19.36079141, 13.59713871, 2.16324251, 4.99760396, -1.08711975, -2.09223717, 6.65227299, -5.83905709, -0.66256752, -2.78733462, 19.36079141};\n    OSQPInt P_nnz = 20;\n    OSQPInt P_i[20] = {0, 0, 1, 0, 1, 2, 0, 1, 2, 3, 4, 4, 5, 4, 5, 6, 4, 5, 6, 7};\n    OSQPInt P_p[9] = {0, 1, 3, 6, 10, 11, 13, 16, 20};\n\n    OSQPFloat q[8] = {-2.35030105, -0.08918724, 1.43315194, 8.64207448, 3.35030105, 1.08918724, -0.43315194, -7.64207448};\n\n    OSQPFloat A_x[16] = {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0};\n    OSQPInt A_nnz = 16;\n    OSQPInt A_i[16] = {0, 4, 1, 5, 2, 6, 3, 7, 0, 8, 1, 9, 2, 10, 3, 11};\n    OSQPInt A_p[9] = {0, 2, 4, 6, 8, 10, 12, 14, 16};\n\n    OSQPFloat l[12] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};\n    OSQPFloat u[12] = {OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY};\n\n    OSQPInt exitflag = 0;\n    OSQPSolver *solver = NULL;\n    OSQPSettings *settings = NULL;\n    OSQPCscMatrix* P = NULL;\n    OSQPCscMatrix* A = NULL;\n    FILE *f = NULL;\n\n    P = OSQPCscMatrix_new(n, n, P_nnz, P_x, P_i, P_p);\n    A = OSQPCscMatrix_new(m, n, A_nnz, A_x, A_i, A_p);\n    settings = OSQPSettings_new();\n\n    if (!P || !A || !settings) {\n        exitflag = 1;\n        goto cleanup;\n    }\n\n    exitflag = osqp_setup(&solver, P, q, A, l, u, m, n, settings);\n    if (exitflag) {\n       goto cleanup;\n    }\n\n    exitflag = osqp_solve(solver);\n\n    if (solver && solver->info->status_val == OSQP_SOLVED) {\n        f = fopen(\"c_results.txt\", \"w\");\n        if (f) {\n            fprintf(f, \"%.10e\\n\", solver->info->obj_val);\n            fclose(f);\n        } else {\n             fprintf(stderr, \"Error opening file c_results.txt for writing.\\n\");\n             exitflag = 1;\n        }\n    } else if (solver) {\n         fprintf(stderr, \"Solver failed with status: %s\\n\", solver->info->status);\n         exitflag = solver->info->status_val;\n    } else {\n         fprintf(stderr, \"Solver setup failed or solver is NULL.\\n\");\n         exitflag = 1;\n    }\n\ncleanup:\n    if (solver) osqp_cleanup(solver);\n    if (A) OSQPCscMatrix_free(A);\n    if (P) OSQPCscMatrix_free(P);\n    if (settings) OSQPSettings_free(settings);\n\n    return (int)exitflag;\n}",
    "metadata": {"problem_type": "QP"}
  },
  {
    "id": 15,
    "solver": "OSQP",
    "type": "Lasso",
    "python_code": "import osqp\nimport numpy as np\nfrom scipy import sparse\n\nm, n = 15, 6\nX = np.random.randn(m, n)\ny = np.random.randn(m)\nlam = 0.3\n\nP = sparse.block_diag([X.T@X, X.T@X], format='csc')\nq = np.hstack([-X.T@y, X.T@y]) + lam*np.ones(2*n)\nA = sparse.vstack([\n    sparse.hstack([sparse.eye(n), -sparse.eye(n)]),\n    sparse.hstack([-sparse.eye(n), -sparse.eye(n)]),\n    sparse.eye(2*n)\n], format='csc')\nl = np.hstack([np.zeros(n), -np.inf*np.ones(n), np.zeros(2*n)])\nu = np.hstack([np.inf*np.ones(n), np.zeros(n), np.inf*np.ones(2*n)])\n\nprob = osqp.OSQP()\nprob.setup(P, q, A, l, u)\nres = prob.solve()\nprint(\"Beta:\", res.x[:n] - res.x[n:])",
    "c_code": "#include <stdio.h>\n#include <stdlib.h>\n#include \"osqp.h\"\n#include <math.h>\n\nint main(int argc, char **argv) {\n    OSQPInt n = 12;\n    OSQPInt m = 24;\n\n    OSQPFloat P_x[42] = {19.24627733, 5.56381682, 18.32632816, -0.28473765, 2.00686428, 15.40548543, -6.71244354, -4.31295845, -2.7158085, 13.12618342, -3.03820788, -2.52761456, 8.78132747, -2.66878008, 24.7820534, -5.95108245, -7.64224712, 0.03041365, -0.67261589, 1.68609115, 11.75109763, 19.24627733, 5.56381682, 18.32632816, -0.28473765, 2.00686428, 15.40548543, -6.71244354, -4.31295845, -2.7158085, 13.12618342, -3.03820788, -2.52761456, 8.78132747, -2.66878008, 24.7820534, -5.95108245, -7.64224712, 0.03041365, -0.67261589, 1.68609115, 11.75109763};\n    OSQPInt P_nnz = 42;\n    OSQPInt P_i[42] = {0, 0, 1, 0, 1, 2, 0, 1, 2, 3, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 6, 6, 7, 6, 7, 8, 6, 7, 8, 9, 6, 7, 8, 9, 10, 6, 7, 8, 9, 10, 11};\n    OSQPInt P_p[13] = {0, 1, 3, 6, 10, 15, 21, 22, 24, 27, 31, 36, 42};\n\n    OSQPFloat q[12] = {-3.11186404, -1.53636425, 3.75058076, -0.78420796, 7.9783132, 3.01119811, 3.71186404, 2.13636425, -3.15058076, 1.38420796, -7.3783132, -2.41119811};\n\n    OSQPFloat A_x[36] = {1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0};\n    OSQPInt A_nnz = 36;\n    OSQPInt A_i[36] = {0, 6, 12, 1, 7, 13, 2, 8, 14, 3, 9, 15, 4, 10, 16, 5, 11, 17, 0, 6, 18, 1, 7, 19, 2, 8, 20, 3, 9, 21, 4, 10, 22, 5, 11, 23};\n    OSQPInt A_p[13] = {0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36};\n\n    OSQPFloat l[24] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -OSQP_INFTY, -OSQP_INFTY, -OSQP_INFTY, -OSQP_INFTY, -OSQP_INFTY, -OSQP_INFTY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};\n    OSQPFloat u[24] = {OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY, OSQP_INFTY};\n\n    OSQPInt exitflag = 0;\n    OSQPSolver *solver = NULL;\n    OSQPSettings *settings = NULL;\n    OSQPCscMatrix* P = NULL;\n    OSQPCscMatrix* A = NULL;\n    FILE* f = NULL;\n\n    P = OSQPCscMatrix_new(n, n, P_nnz, P_x, P_i, P_p);\n    A = OSQPCscMatrix_new(m, n, A_nnz, A_x, A_i, A_p);\n    settings = OSQPSettings_new();\n\n    if (!P || !A || !settings) {\n        exitflag = 1;\n        goto cleanup;\n    }\n\n    exitflag = osqp_setup(&solver, P, q, A, l, u, m, n, settings);\n    if (exitflag) {\n        goto cleanup;\n    }\n\n    exitflag = osqp_solve(solver);\n    if (exitflag) {\n        goto cleanup;\n    }\n\n    if (solver && solver->info->status_val == OSQP_SOLVED) {\n        f = fopen(\"c_results.txt\", \"w\");\n        if (f == NULL) {\n            printf(\"Error opening file!\\n\");\n            exitflag = 1;\n            goto cleanup;\n        }\n        fprintf(f, \"%.10e\\n\", solver->info->obj_val);\n        fclose(f);\n        f = NULL;\n    } else if (solver) {\n        printf(\"Solver failed with status: %s\\n\", solver->info->status);\n        exitflag = 1;\n    } else {\n        printf(\"Solver initialization failed.\\n\");\n        exitflag = 1;\n    }\n\ncleanup:\n    if (f) fclose(f);\n    osqp_cleanup(solver);\n    if (A) OSQPCscMatrix_free(A);\n    if (P) OSQPCscMatrix_free(P);\n    if (settings) OSQPSettings_free(settings);\n\n    return (int)exitflag;\n}",
    "metadata": {"problem_type": "QP"}
  }
]
